#include <iostream>
#include <cmath> // For abs()

using namespace std;

// Function to calculate SCAN head movement
int calculateSCAN(int requests[], int numRequests, int initialHead, int diskSize) {
    int sortedRequests[20]; // To store sorted requests
    for (int i = 0; i < numRequests; ++i) {
        sortedRequests[i] = requests[i];
    }

    // Sort the requests in ascending order
    for (int i = 0; i < numRequests - 1; ++i) {
        for (int j = i + 1; j < numRequests; ++j) {
            if (sortedRequests[i] > sortedRequests[j]) {
                int temp = sortedRequests[i];
                sortedRequests[i] = sortedRequests[j];
                sortedRequests[j] = temp;
            }
        }
    }

    int head = initialHead;
    int totalMovement = 0;

    // Identify the direction: move right first
    int index = 0;
    while (index < numRequests && sortedRequests[index] < head) {
        ++index;
    }

    // Move to the right (towards larger values)
    for (int i = index; i < numRequests; ++i) {
        totalMovement += abs(sortedRequests[i] - head);
        head = sortedRequests[i];
    }

    // Move to the rightmost edge of the disk
    if (head != diskSize - 1) {
        totalMovement += abs(diskSize - 1 - head);
        head = diskSize - 1;
    }

    // Move to the left (towards smaller values)
    for (int i = index - 1; i >= 0; --i) {
        totalMovement += abs(sortedRequests[i] - head);
        head = sortedRequests[i];
    }

    return totalMovement;
}

int main() {
    int initialHead = 143; // Initial position of the disk head
    int diskSize = 200;    // Total number of tracks on the disk
    int requests[] = {86, 147, 91, 177, 94, 150, 102, 175, 130}; // Request queue
    int numRequests = sizeof(requests) / sizeof(requests[0]); // Number of requests

    cout << "Disk Scheduling Algorithm: SCAN (Elevator Algorithm)\n";
    cout << "Initial Head Position: " << initialHead << "\n";
    cout << "Requests: ";
    for (int i = 0; i < numRequests; ++i) {
        cout << requests[i] << " ";
    }
    cout << "\n";

    // Calculate and display the total head movement
    int totalMovement = calculateSCAN(requests, numRequests, initialHead, diskSize);
    cout << "Total head movement using SCAN: " << totalMovement << " tracks\n";

    return 0;
}
